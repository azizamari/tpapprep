TP4 - REST : Gestion Personnel Pour créer un projet simple de gestion de personnel avec Maven, Spring Boot, et IntelliJ IDEA, nous allons suivre plusieurs étapes, depuis la création du projet jusqu'à l'implémentation d'un service REST de base. L'artifact sera nommé Personnel. Étape 1 : Création du projet 1. Ouvrir IntelliJ IDEA et sélectionner "New Project". 2. Choisir "Spring Initializr" comme générateur de projet (lien: https://start.spring.io/). 3. Configurer le projet avec les paramètres suivants : a. Group: gl2.example b. Artifact: Personnel c. Name: Personnel d. Package Name: gl2.example.personnel e. Java ersion: 17 (la version du langage java) f. JDK : JDK 22 (pour compilation ) 4. Cliquer sur Next et ajouter les dépendances suivantes : a. Spring Web (pour créer des services REST) b. Spring Data JPA (pour la gestion des données) c. H2 Database (base de données en mémoire pour les tests) 5. Cliquer sur Finish pour générer le projet. Étape 2 : Arborescence du projet Exemple d’architecture: • model → représente une entité (table). • Repository → interface qui hérite de JpaRepository (base de donnée). • Service → contient la logique métier. • Controller → expose les services via une API REST. L'arborescence de base d'un projet Maven Spring Boot pour la gestion du personnel : Étape 3 : Implémentation des fichiers et classes 1. EmployeeApplication.java (classe principale): [voir fichier dans Classroom] 2. Employee.java (modèle) [voir fichier dans Classroom] 3. EmployeeRepository.java (référentiel) [voir fichier dans Classroom] 4. EmployeeService.java (service) [voir fichier dans Classroom] 5. PersonnelController.java (contrôleur) [voir fichier dans Classroom] 6. application.properties (configuration) [voir fichier dans Classroom] Dans le fichier src/main/resources/application.properties, ajoutez les configurations suivantes pour utiliser une base de données H2 en mémoire : spring.application.name=personnel spring.h2.console.enabled=true spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password=password spring.jpa.database-platform=org.hibernate.dialect.H2Dialect spring.jpa.hibernate.ddl-auto=update Qu’est-ce qu’une base H2 en mémoire ? H2 est une base de données relationnelle écrite en Java, embarquée (embedded) et in- memory (en mémoire), c’est-à-dire qu’elle fonctionne directement dans le processus Java et n’écrit rien sur le disque. Quand l’application s’arrête, la base est détruite (sauf configuration spéciale). Intérêt dans un service REST Dans un service REST, H2 peut être utilisée comme base temporaire pour stocker des entités que votre API expose via des endpoints (GET, POST, etc.). Exemple de cas d’usage : • Développement d’un service REST de gestion de produits (/products) • Utilisation d’H2 pour stocker les produits de manière temporaire • Accès CRUD via des endpoints REST Étape 4 : Lancer le projet 1. Dans IntelliJ IDEA, cliquez sur la classe PersonnelApplication et lancez-la. 2. Le service REST est maintenant disponible à l'adresse http://localhost:8080/api/employees. Vous pouvez interagir avec les employés via les points de terminaison : • GET /api/employees : récupérer tous les employés. • GET /api/employees/{id} : récupérer un employé par ID. • POST /api/employees : ajouter un nouvel employé (envoyer un objet JSON). • DELETE /api/employees/{id} : supprimer un employé. Étape 5 : Tester l'API Tester des API directement dans Chrome en utilisant la barre d'adresse n'est pas possible que pour la requête GET. Les requêtes POST, PUT ou DELETE, contiennent des données qui ne peuvent pas être envoyées directement à partir de la barre d'adresse du navigateur. Cependant, il existe plusieurs façons de le faire. → Tester les Requêtes GET directement sur le navigateur Pour tester les requêtes GET, vous pouvez simplement entrer l'URL de l'API directement dans la barre d'adresse de Chrome, par exemple : http://localhost:8080/api/employees Cela affichera la réponse JSON (ou tout autre type de réponse) directement dans le navigateur. → Tester en utilisant l'Extensions de Navigateur Postman Il existe plusieurs extensions pour Chrome qui vous permettent d'envoyer des requêtes API, notamment Postman. Bien qu'il s'agisse principalement d'une application de bureau, vous pouvez également utiliser Postman comme une extension Chrome (ou bien créer un compte en ligne). Ce qui permet d'envoyer des requêtes de manière conviviale. 1. Installer Postman si ce n'est pas déjà fait [lien]. 2. Ouvrir Postman. 3. Créer une nouvelle requête. 4. Choisir la méthode (GET, POST, PUT, DELETE). 5. Entrez l'URL de votre API (par exemple, http://localhost:8080/api/employees/1). 6. Si vous utilisez POST ou PUT, allez dans l'onglet Body et sélectionnez raw, puis choisissez JSON dans le menu déroulant. 7. Entrez vos données JSON. 8. Cliquez sur Send pour envoyer la requête. Pour tester L' API Employee sur Postman : 1. GET - Liste de tous les employés • Méthode : GET • URL : http://localhost:8080/api/employees • Description : Récupérer la liste de tous les employés. 2. GET - Détails d'un employé par ID • Méthode : GET • URL : http://localhost:8080/api/employees/{id} o Remplace {id} par l'ID de l'employé (par exemple, 1). o http://localhost:8080/api/employees/1 • Description : Récupérer les informations d'un employé spécifique en utilisant son id. 3. POST - Créer un nouvel employé • Méthode : POST • URL : http://localhost:8080/api/employees • Body (format JSON) : o Sélectionne l'option raw et choisis JSON comme type de de Body. o Exemple de contenu dans le corps de la requête : { "name": "hedi", "position": "Professeur", "salary": 4500 } • Description : Crée un nouvel employé avec les informations envoyées dans le corps de la requête. 4. PUT - Mettre à jour un employé existant (tous les champs doivent être révisés) • Méthode : PUT • URL : http://localhost:8080/api/employees/{id} o Remplace {id} par l'ID de l'employé à mettre à jour. o Exemple: http://localhost:8080/api/employees/1 • Body (format JSON) : o Exemple de contenu dans le corps de la requête : { "name": "Salma", "position": "Directrice", "salary": 5000 } • Description : Met à jour les informations d'un employé spécifié par son ID. 4. PATCH - Mettre à jour une partie d’un employé • Méthode : Patch • URL : http://localhost:8080/api/employees/{id} o Remplace {id} par l'ID de l'employé à mettre à jour. o Exemple: http://localhost:8080/api/employees/1 • Body (format JSON) : o Exemple de contenu dans le corps de la requête pour changer salary de: { "salary": 5500 } • Description : Met à jour les informations d'un employé spécifié par son ID. 5. DELETE - Supprimer un employé • Méthode : DELETE • URL : http://localhost:8080/api/employees/{id} o Remplace {id} par l'ID de l'employé que tu veux supprimer. • Description : Supprime un employé en utilisant son id. → Tester les Requêtes GET, POST, PUT et DELETE sur PowerShell Voici des exemples pour appeler les différentes API (GET, POST, PUT, DELETE) en utilisant Invoke-WebRequest sur le terminal PowerShell de Windows. 1. Requête GET Pour récupérer une liste de ressources ou des informations d’une API : Invoke-WebRequest -Uri "http://localhost:8080/api/employees" -Method GET Cela renvoie la liste des employés depuis l'URL spécifiée. 2. Requête POST Pour créer une nouvelle ressource, par exemple un nouvel employé, vous devez envoyer des données au format JSON. Invoke-WebRequest -Uri "http://localhost:8080/api/employees" -Method POST -Headers @{ "Content-Type" = "application/json" } -Body '{"name": "John Doe", "position": "Developer", "salary": 50000}' • -Headers : spécifie que le contenu est au format JSON. • -Body : le corps de la requête, ici un objet JSON représentant un employé. 3. Requête PUT Pour mettre à jour une ressource existante, spécifiez l'ID de la ressource dans l'URL et les données à mettre à jour dans le corps de la requête. Invoke-WebRequest -Uri "http://localhost:8080/api/employees/1" - Method PUT -Headers @{ "Content-Type" = "application/json" } - Body '{"name": "Jane Doe", "position": "Senior Developer", "salary": 60000}' Ici, on met à jour l'employé avec l'ID 1 pour qu'il ait un nouveau nom, un nouveau poste et un salaire ajusté. 4. Requête DELETE Pour supprimer une ressource, spécifiez simplement l'ID dans l'URL et utilisez la méthode DELETE : Invoke-WebRequest -Uri "http://localhost:8080/api/employees/1" - Method DELETE Cela supprime l'employé ayant l'ID 1 de la base de données. Exemple complet avec des paramètres de sortie supplémentaires Si vous souhaitez voir plus de détails sur la requête, comme les en-têtes de réponse et le contenu de la réponse, vous pouvez utiliser des options supplémentaires : $response = Invoke-WebRequest –Uri "http://localhost:8080/api/employees" -Method GET $response | Format-List * # Affiche toutes les propriétés de la réponse Cela affiche toutes les informations disponibles sur la réponse, telles que le statut HTTP, les en-têtes de réponse, et le contenu de la réponse.